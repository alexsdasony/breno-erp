// Teste completo das 11 demandas
import puppeteer from 'puppeteer';

async function testAllDemands() {
  console.log('üß™ TESTANDO TODAS AS 11 DEMANDAS...\n');
  
  const browser = await puppeteer.launch({ 
    headless: false, 
    defaultViewport: null,
    args: ['--start-maximized']
  });
  
  const page = await browser.newPage();
  const results = [];
  
  try {
    // Login
    console.log('üîê Fazendo login...');
    await page.goto('http://localhost:3000/login');
    await page.waitForSelector('input[type="email"]', { timeout: 10000 });
    await page.type('input[type="email"]', 'admin@erppro.com');
    await page.type('input[type="password"]', 'admin123');
    await page.click('button[type="submit"]');
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    // TESTE 1: Valida√ß√£o CPF/CNPJ em fornecedores
    console.log('\nüìã TESTE 1: Valida√ß√£o CPF/CNPJ em fornecedores');
    await page.goto('http://localhost:3000/suppliers');
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    // Procurar bot√£o "Novo Fornecedor"
    const newSupplierBtn = await page.$('[id*="new"], button[class*="new"]');
    if (newSupplierBtn) {
      await newSupplierBtn.click();
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      // Testar CPF inv√°lido
      const cpfField = await page.$('input[placeholder*="CPF"], input[placeholder*="CNPJ"], input[name*="cpf"], input[name*="cnpj"]');
      if (cpfField) {
        await cpfField.type('111.111.111-11');
        await page.click('body'); // Trigger validation
        
        const errorMsg = await page.$('.text-red-600, .error, [class*="error"]');
        if (errorMsg) {
          console.log('‚úÖ Valida√ß√£o CPF/CNPJ: FUNCIONANDO');
          results.push({ test: 1, status: 'PASS', message: 'Valida√ß√£o CPF/CNPJ funcionando' });
        } else {
          console.log('‚ùå Valida√ß√£o CPF/CNPJ: N√ÉO FUNCIONANDO');
          results.push({ test: 1, status: 'FAIL', message: 'Valida√ß√£o CPF/CNPJ n√£o funcionando' });
        }
      } else {
        console.log('‚ùå Campo CPF/CNPJ n√£o encontrado');
        results.push({ test: 1, status: 'FAIL', message: 'Campo CPF/CNPJ n√£o encontrado' });
      }
    } else {
      console.log('‚ùå Bot√£o "Novo Fornecedor" n√£o encontrado');
      results.push({ test: 1, status: 'FAIL', message: 'Bot√£o "Novo Fornecedor" n√£o encontrado' });
    }
    
    // TESTE 2: Bot√£o cancelar em fornecedores
    console.log('\nüìã TESTE 2: Bot√£o cancelar em fornecedores');
    const cancelBtn = await page.$('button:contains("Cancelar"), button:contains("Cancel")');
    if (cancelBtn) {
      console.log('‚úÖ Bot√£o cancelar fornecedores: VIS√çVEL');
      results.push({ test: 2, status: 'PASS', message: 'Bot√£o cancelar fornecedores vis√≠vel' });
    } else {
      console.log('‚ùå Bot√£o cancelar fornecedores: N√ÉO VIS√çVEL');
      results.push({ test: 2, status: 'FAIL', message: 'Bot√£o cancelar fornecedores n√£o vis√≠vel' });
    }
    
    // TESTE 3: Cria√ß√£o de fornecedor
    console.log('\nüìã TESTE 3: Cria√ß√£o de fornecedor');
    const nameField = await page.$('input[placeholder*="Nome"], input[name*="name"], input[name*="razao"]');
    if (nameField) {
      await nameField.type('Fornecedor Teste');
      const emailField = await page.$('input[type="email"]');
      if (emailField) {
        await emailField.type('teste@fornecedor.com');
      }
      
      const submitBtn = await page.$('button[type="submit"], button:contains("Salvar"), button:contains("Criar")');
      if (submitBtn) {
        await submitBtn.click();
        await new Promise(resolve => setTimeout(resolve, 3000));
        
        // Verificar se foi criado (n√£o est√° mais no formul√°rio)
        const currentUrl = page.url();
        if (!currentUrl.includes('form') && !currentUrl.includes('new')) {
          console.log('‚úÖ Cria√ß√£o de fornecedor: FUNCIONANDO');
          results.push({ test: 3, status: 'PASS', message: 'Cria√ß√£o de fornecedor funcionando' });
        } else {
          console.log('‚ùå Cria√ß√£o de fornecedor: N√ÉO FUNCIONANDO');
          results.push({ test: 3, status: 'FAIL', message: 'Cria√ß√£o de fornecedor n√£o funcionando' });
        }
      } else {
        console.log('‚ùå Bot√£o submit n√£o encontrado');
        results.push({ test: 3, status: 'FAIL', message: 'Bot√£o submit n√£o encontrado' });
      }
    } else {
      console.log('‚ùå Campo nome n√£o encontrado');
      results.push({ test: 3, status: 'FAIL', message: 'Campo nome n√£o encontrado' });
    }
    
    // TESTE 4: Atualiza√ß√£o de fornecedor
    console.log('\nüìã TESTE 4: Atualiza√ß√£o de fornecedor');
    await page.goto('http://localhost:3000/suppliers');
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    const editBtn = await page.$('button[title*="Editar"], button:contains("Editar"), [id*="edit"]');
    if (editBtn) {
      await editBtn.click();
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      const nameFieldEdit = await page.$('input[value*="Fornecedor"], input[name*="name"]');
      if (nameFieldEdit) {
        await nameFieldEdit.click({ clickCount: 3 }); // Selecionar todo o texto
        await nameFieldEdit.type('Fornecedor Atualizado');
        
        const updateBtn = await page.$('button[type="submit"], button:contains("Atualizar"), button:contains("Salvar")');
        if (updateBtn) {
          await updateBtn.click();
          await new Promise(resolve => setTimeout(resolve, 2000));
          console.log('‚úÖ Atualiza√ß√£o de fornecedor: FUNCIONANDO');
          results.push({ test: 4, status: 'PASS', message: 'Atualiza√ß√£o de fornecedor funcionando' });
        } else {
          console.log('‚ùå Bot√£o atualizar n√£o encontrado');
          results.push({ test: 4, status: 'FAIL', message: 'Bot√£o atualizar n√£o encontrado' });
        }
      } else {
        console.log('‚ùå Campo nome para edi√ß√£o n√£o encontrado');
        results.push({ test: 4, status: 'FAIL', message: 'Campo nome para edi√ß√£o n√£o encontrado' });
      }
    } else {
      console.log('‚ùå Bot√£o editar n√£o encontrado');
      results.push({ test: 4, status: 'FAIL', message: 'Bot√£o editar n√£o encontrado' });
    }
    
    // TESTE 5: Bot√£o cancelar em clientes
    console.log('\nüìã TESTE 5: Bot√£o cancelar em clientes');
    await page.goto('http://localhost:3000/customers');
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    const newCustomerBtn = await page.$('button:contains("Novo"), button:contains("Cadastro"), [id*="new"]');
    if (newCustomerBtn) {
      await newCustomerBtn.click();
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      const customerCancelBtn = await page.$('button:contains("Cancelar"), button:contains("Cancel")');
      if (customerCancelBtn) {
        console.log('‚úÖ Bot√£o cancelar clientes: VIS√çVEL');
        results.push({ test: 5, status: 'PASS', message: 'Bot√£o cancelar clientes vis√≠vel' });
      } else {
        console.log('‚ùå Bot√£o cancelar clientes: N√ÉO VIS√çVEL');
        results.push({ test: 5, status: 'FAIL', message: 'Bot√£o cancelar clientes n√£o vis√≠vel' });
      }
    } else {
      console.log('‚ùå Bot√£o novo cliente n√£o encontrado');
      results.push({ test: 5, status: 'FAIL', message: 'Bot√£o novo cliente n√£o encontrado' });
    }
    
    // TESTE 6: Atualiza√ß√£o de cliente
    console.log('\nüìã TESTE 6: Atualiza√ß√£o de cliente');
    const customerNameField = await page.$('input[placeholder*="Nome"], input[name*="name"]');
    if (customerNameField) {
      await customerNameField.type('Cliente Teste');
      const customerSubmitBtn = await page.$('button[type="submit"], button:contains("Salvar"), button:contains("Criar")');
      if (customerSubmitBtn) {
        await customerSubmitBtn.click();
        await new Promise(resolve => setTimeout(resolve, 2000));
        console.log('‚úÖ Atualiza√ß√£o de cliente: FUNCIONANDO');
        results.push({ test: 6, status: 'PASS', message: 'Atualiza√ß√£o de cliente funcionando' });
      } else {
        console.log('‚ùå Bot√£o submit cliente n√£o encontrado');
        results.push({ test: 6, status: 'FAIL', message: 'Bot√£o submit cliente n√£o encontrado' });
      }
    } else {
      console.log('‚ùå Campo nome cliente n√£o encontrado');
      results.push({ test: 6, status: 'FAIL', message: 'Campo nome cliente n√£o encontrado' });
    }
    
    // TESTE 7: Inconsist√™ncia no estoque
    console.log('\nüìã TESTE 7: Inconsist√™ncia no estoque');
    await page.goto('http://localhost:3000/inventory');
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    const stockCells = await page.$$('td:contains("unidades"), td:contains("estoque")');
    if (stockCells.length > 0) {
      console.log('‚úÖ Exibi√ß√£o de estoque: FUNCIONANDO');
      results.push({ test: 7, status: 'PASS', message: 'Exibi√ß√£o de estoque funcionando' });
    } else {
      console.log('‚ùå Exibi√ß√£o de estoque: N√ÉO FUNCIONANDO');
      results.push({ test: 7, status: 'FAIL', message: 'Exibi√ß√£o de estoque n√£o funcionando' });
    }
    
    // TESTE 8: Dropdowns de usu√°rios
    console.log('\nüìã TESTE 8: Dropdowns de usu√°rios (fundo branco)');
    await page.goto('http://localhost:3000/users');
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    const selects = await page.$$('select');
    let dropdownFixed = false;
    for (let select of selects) {
      const style = await select.evaluate(el => el.style.backgroundColor);
      if (style && (style.includes('374151') || style.includes('gray'))) {
        dropdownFixed = true;
        break;
      }
    }
    
    if (dropdownFixed) {
      console.log('‚úÖ Dropdowns de usu√°rios: CORRIGIDOS');
      results.push({ test: 8, status: 'PASS', message: 'Dropdowns de usu√°rios corrigidos' });
    } else {
      console.log('‚ùå Dropdowns de usu√°rios: N√ÉO CORRIGIDOS');
      results.push({ test: 8, status: 'FAIL', message: 'Dropdowns de usu√°rios n√£o corrigidos' });
    }
    
    // TESTE 9: Cria√ß√£o de usu√°rios
    console.log('\nüìã TESTE 9: Cria√ß√£o de usu√°rios');
    const newUserBtn = await page.$('button:contains("Novo Usu√°rio"), button:contains("Novo")');
    if (newUserBtn) {
      await newUserBtn.click();
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      const userNameField = await page.$('input[placeholder*="Nome"], input[name*="name"]');
      if (userNameField) {
        await userNameField.type('Usu√°rio Teste');
        const userEmailField = await page.$('input[type="email"]');
        if (userEmailField) {
          await userEmailField.type('teste@usuario.com');
          const userPasswordField = await page.$('input[type="password"]');
          if (userPasswordField) {
            await userPasswordField.type('senha123');
            
            const userSubmitBtn = await page.$('button[type="submit"], button:contains("Criar"), button:contains("Salvar")');
            if (userSubmitBtn) {
              await userSubmitBtn.click();
              await new Promise(resolve => setTimeout(resolve, 2000));
              console.log('‚úÖ Cria√ß√£o de usu√°rios: FUNCIONANDO');
              results.push({ test: 9, status: 'PASS', message: 'Cria√ß√£o de usu√°rios funcionando' });
            } else {
              console.log('‚ùå Bot√£o submit usu√°rio n√£o encontrado');
              results.push({ test: 9, status: 'FAIL', message: 'Bot√£o submit usu√°rio n√£o encontrado' });
            }
          } else {
            console.log('‚ùå Campo senha usu√°rio n√£o encontrado');
            results.push({ test: 9, status: 'FAIL', message: 'Campo senha usu√°rio n√£o encontrado' });
          }
        } else {
          console.log('‚ùå Campo email usu√°rio n√£o encontrado');
          results.push({ test: 9, status: 'FAIL', message: 'Campo email usu√°rio n√£o encontrado' });
        }
      } else {
        console.log('‚ùå Campo nome usu√°rio n√£o encontrado');
        results.push({ test: 9, status: 'FAIL', message: 'Campo nome usu√°rio n√£o encontrado' });
      }
    } else {
      console.log('‚ùå Bot√£o novo usu√°rio n√£o encontrado');
      results.push({ test: 9, status: 'FAIL', message: 'Bot√£o novo usu√°rio n√£o encontrado' });
    }
    
    // TESTE 10: Edi√ß√£o Perfil/Segmento de usu√°rios
    console.log('\nüìã TESTE 10: Edi√ß√£o Perfil/Segmento de usu√°rios');
    const userEditBtn = await page.$('button[title*="Editar"], button:contains("Editar")');
    if (userEditBtn) {
      await userEditBtn.click();
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      const roleSelect = await page.$('select[name*="role"], select[id*="role"]');
      if (roleSelect) {
        await roleSelect.select('admin');
        const segmentSelect = await page.$('select[name*="segment"], select[id*="segment"]');
        if (segmentSelect) {
          await segmentSelect.select('1'); // Selecionar primeiro segmento
        }
        
        const updateUserBtn = await page.$('button[type="submit"], button:contains("Atualizar"), button:contains("Salvar")');
        if (updateUserBtn) {
          await updateUserBtn.click();
          await new Promise(resolve => setTimeout(resolve, 2000));
          console.log('‚úÖ Edi√ß√£o Perfil/Segmento: FUNCIONANDO');
          results.push({ test: 10, status: 'PASS', message: 'Edi√ß√£o Perfil/Segmento funcionando' });
        } else {
          console.log('‚ùå Bot√£o atualizar usu√°rio n√£o encontrado');
          results.push({ test: 10, status: 'FAIL', message: 'Bot√£o atualizar usu√°rio n√£o encontrado' });
        }
      } else {
        console.log('‚ùå Select perfil n√£o encontrado');
        results.push({ test: 10, status: 'FAIL', message: 'Select perfil n√£o encontrado' });
      }
    } else {
      console.log('‚ùå Bot√£o editar usu√°rio n√£o encontrado');
      results.push({ test: 10, status: 'FAIL', message: 'Bot√£o editar usu√°rio n√£o encontrado' });
    }
    
    // TESTE 11: Reset de senha
    console.log('\nüìã TESTE 11: Reset de senha');
    const resetBtn = await page.$('button[title*="Reset"], button:contains("Reset"), button:contains("Senha")');
    if (resetBtn) {
      await resetBtn.click();
      await new Promise(resolve => setTimeout(resolve, 1000));
      console.log('‚úÖ Reset de senha: FUNCIONANDO (senha padr√£o: senha123)');
      results.push({ test: 11, status: 'PASS', message: 'Reset de senha funcionando (senha padr√£o: senha123)' });
    } else {
      console.log('‚ùå Bot√£o reset senha n√£o encontrado');
      results.push({ test: 11, status: 'FAIL', message: 'Bot√£o reset senha n√£o encontrado' });
    }
    
    // RESUMO DOS RESULTADOS
    console.log('\nüéØ RESUMO DOS TESTES:');
    console.log('==================');
    
    const passed = results.filter(r => r.status === 'PASS').length;
    const failed = results.filter(r => r.status === 'FAIL').length;
    
    console.log(`‚úÖ Passou: ${passed}/11`);
    console.log(`‚ùå Falhou: ${failed}/11`);
    console.log(`üìä Taxa de sucesso: ${Math.round((passed/11)*100)}%`);
    
    console.log('\nüìã DETALHES:');
    results.forEach(result => {
      const icon = result.status === 'PASS' ? '‚úÖ' : '‚ùå';
      console.log(`${icon} Teste ${result.test}: ${result.message}`);
    });
    
  } catch (error) {
    console.error('‚ùå Erro durante os testes:', error.message);
  } finally {
    await browser.close();
  }
}

testAllDemands().catch(console.error);
