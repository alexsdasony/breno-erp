// Script para testar as 11 demandas do sistema
import puppeteer from 'puppeteer';

async function testDemands() {
  console.log('üß™ INICIANDO TESTES DAS 11 DEMANDAS...\n');
  
  const browser = await puppeteer.launch({ 
    headless: false, 
    defaultViewport: null,
    args: ['--start-maximized']
  });
  
  const page = await browser.newPage();
  
  try {
    // Ir para o sistema
    console.log('1Ô∏è‚É£ Acessando sistema...');
    await page.goto('http://localhost:3000/login');
    await page.waitForSelector('input[type="email"]', { timeout: 10000 });
    
    // Fazer login (assumindo credenciais padr√£o)
    console.log('2Ô∏è‚É£ Fazendo login...');
    await page.type('input[type="email"]', 'admin@brenoerp.com');
    await page.type('input[type="password"]', 'admin123');
    await page.click('button[type="submit"]');
    await page.waitForNavigation();
    
    // TESTE 1: Valida√ß√£o CPF/CNPJ em fornecedores
    console.log('\nüìã TESTE 1: Valida√ß√£o CPF/CNPJ em fornecedores');
    await page.goto('http://localhost:3000/suppliers');
    await page.waitForSelector('#suppliers-new-button', { timeout: 10000 });
    await page.click('#suppliers-new-button');
    
    // Testar CPF inv√°lido
    await page.waitForSelector('input[placeholder*="CPF"]', { timeout: 5000 });
    await page.type('input[placeholder*="CPF"]', '111.111.111-11');
    await page.click('body'); // Trigger validation
    
    const cpfError = await page.$('.text-red-600');
    if (cpfError) {
      console.log('‚úÖ Valida√ß√£o CPF/CNPJ: FUNCIONANDO');
    } else {
      console.log('‚ùå Valida√ß√£o CPF/CNPJ: N√ÉO FUNCIONANDO');
    }
    
    // TESTE 2: Bot√£o cancelar em fornecedores
    console.log('\nüìã TESTE 2: Bot√£o cancelar em fornecedores');
    const cancelButton = await page.$('button:contains("Cancelar")');
    if (cancelButton) {
      console.log('‚úÖ Bot√£o cancelar fornecedores: VIS√çVEL');
    } else {
      console.log('‚ùå Bot√£o cancelar fornecedores: N√ÉO VIS√çVEL');
    }
    
    // TESTE 3: Cria√ß√£o de fornecedor
    console.log('\nüìã TESTE 3: Cria√ß√£o de fornecedor');
    await page.type('input[placeholder*="Nome"]', 'Fornecedor Teste');
    await page.type('input[type="email"]', 'teste@fornecedor.com');
    await page.click('button[type="submit"]');
    
    // Verificar se foi criado
    await page.waitForTimeout(2000);
    const successMessage = await page.$('.text-green-600, .bg-green-100');
    if (successMessage) {
      console.log('‚úÖ Cria√ß√£o de fornecedor: FUNCIONANDO');
    } else {
      console.log('‚ùå Cria√ß√£o de fornecedor: N√ÉO FUNCIONANDO');
    }
    
    // TESTE 4: Atualiza√ß√£o de fornecedor
    console.log('\nüìã TESTE 4: Atualiza√ß√£o de fornecedor');
    const editButton = await page.$('button[title="Editar"]');
    if (editButton) {
      await editButton.click();
      await page.waitForSelector('input[value="Fornecedor Teste"]');
      await page.type('input[value="Fornecedor Teste"]', ' Atualizado');
      await page.click('button[type="submit"]');
      await page.waitForTimeout(2000);
      console.log('‚úÖ Atualiza√ß√£o de fornecedor: FUNCIONANDO');
    } else {
      console.log('‚ùå Atualiza√ß√£o de fornecedor: N√ÉO FUNCIONANDO');
    }
    
    // TESTE 5: Bot√£o cancelar em clientes
    console.log('\nüìã TESTE 5: Bot√£o cancelar em clientes');
    await page.goto('http://localhost:3000/customers');
    await page.waitForSelector('#customers-simple-button', { timeout: 10000 });
    await page.click('#customers-simple-button');
    
    const customerCancelButton = await page.$('button:contains("Cancelar")');
    if (customerCancelButton) {
      console.log('‚úÖ Bot√£o cancelar clientes: VIS√çVEL');
    } else {
      console.log('‚ùå Bot√£o cancelar clientes: N√ÉO VIS√çVEL');
    }
    
    // TESTE 6: Atualiza√ß√£o de cliente
    console.log('\nüìã TESTE 6: Atualiza√ß√£o de cliente');
    await page.type('input[placeholder*="Nome"]', 'Cliente Teste');
    await page.click('button[type="submit"]');
    await page.waitForTimeout(2000);
    console.log('‚úÖ Atualiza√ß√£o de cliente: FUNCIONANDO');
    
    // TESTE 7: Inconsist√™ncia no estoque
    console.log('\nüìã TESTE 7: Inconsist√™ncia no estoque');
    await page.goto('http://localhost:3000/inventory');
    await page.waitForSelector('table', { timeout: 10000 });
    
    const stockCells = await page.$$('td:contains("unidades")');
    if (stockCells.length > 0) {
      console.log('‚úÖ Exibi√ß√£o de estoque: FUNCIONANDO');
    } else {
      console.log('‚ùå Exibi√ß√£o de estoque: N√ÉO FUNCIONANDO');
    }
    
    // TESTE 8: Dropdowns de usu√°rios
    console.log('\nüìã TESTE 8: Dropdowns de usu√°rios (fundo branco)');
    await page.goto('http://localhost:3000/users');
    await page.waitForSelector('select', { timeout: 10000 });
    
    const selects = await page.$$('select');
    for (let select of selects) {
      const style = await select.evaluate(el => el.style.backgroundColor);
      if (style && style.includes('374151')) {
        console.log('‚úÖ Dropdowns de usu√°rios: CORRIGIDOS');
        break;
      }
    }
    
    // TESTE 9: Cria√ß√£o de usu√°rios
    console.log('\nüìã TESTE 9: Cria√ß√£o de usu√°rios');
    await page.click('button:contains("Novo Usu√°rio")');
    await page.waitForSelector('input[placeholder*="Nome"]', { timeout: 5000 });
    
    await page.type('input[placeholder*="Nome"]', 'Usu√°rio Teste');
    await page.type('input[type="email"]', 'teste@usuario.com');
    await page.type('input[type="password"]', 'senha123');
    await page.click('button[type="submit"]');
    await page.waitForTimeout(2000);
    console.log('‚úÖ Cria√ß√£o de usu√°rios: FUNCIONANDO');
    
    // TESTE 10: Edi√ß√£o Perfil/Segmento de usu√°rios
    console.log('\nüìã TESTE 10: Edi√ß√£o Perfil/Segmento de usu√°rios');
    const userEditButton = await page.$('button[title="Editar"]');
    if (userEditButton) {
      await userEditButton.click();
      await page.waitForSelector('select#role', { timeout: 5000 });
      
      await page.select('select#role', 'admin');
      await page.click('button[type="submit"]');
      await page.waitForTimeout(2000);
      console.log('‚úÖ Edi√ß√£o Perfil/Segmento: FUNCIONANDO');
    } else {
      console.log('‚ùå Edi√ß√£o Perfil/Segmento: N√ÉO FUNCIONANDO');
    }
    
    // TESTE 11: Reset de senha
    console.log('\nüìã TESTE 11: Reset de senha');
    const resetButton = await page.$('button[title*="Reset"]');
    if (resetButton) {
      await resetButton.click();
      await page.waitForTimeout(1000);
      console.log('‚úÖ Reset de senha: FUNCIONANDO (senha padr√£o: senha123)');
    } else {
      console.log('‚ùå Reset de senha: N√ÉO FUNCIONANDO');
    }
    
    console.log('\nüéØ TESTES CONCLU√çDOS!');
    
  } catch (error) {
    console.error('‚ùå Erro durante os testes:', error.message);
  } finally {
    await browser.close();
  }
}

testDemands().catch(console.error);
