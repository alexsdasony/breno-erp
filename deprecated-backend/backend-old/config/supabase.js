import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

// Carregar vari√°veis de ambiente
dotenv.config();

// Verificar se as vari√°veis necess√°rias est√£o definidas
const supabaseUrl = process.env.SUPABASE_URL || process.env.VITE_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Vari√°veis de ambiente do Supabase n√£o encontradas!');
  console.error('SUPABASE_URL:', !!supabaseUrl);
  console.error('SUPABASE_SERVICE_ROLE_KEY:', !!supabaseServiceKey);
  throw new Error('‚ùå Vari√°veis de ambiente do Supabase n√£o encontradas!');
}

// Criar cliente Supabase com service role key para opera√ß√µes do backend
export const supabase = createClient(supabaseUrl, supabaseServiceKey, {
  auth: {
    autoRefreshToken: false,
    persistSession: false
  }
});

// Fun√ß√£o para testar conex√£o com o banco
export async function testConnection() {
  try {
    console.log('üîó Testando conex√£o com Supabase...');
    
    // Testar conex√£o fazendo uma query simples
    const { data, error } = await supabase
      .from('users')
      .select('count')
      .limit(1);
    
    if (error) {
      console.error('‚ùå Erro na conex√£o com Supabase:', error.message);
      return false;
    }
    
    console.log('‚úÖ Supabase database connected successfully');
    return true;
    
  } catch (error) {
    console.error('‚ùå Erro ao testar conex√£o com Supabase:', error.message);
    return false;
  }
} 