// Script para testar a sa√∫de do sistema
console.log('üè• Testando sa√∫de do sistema...');

// Testar se o servidor est√° respondendo
async function testServerHealth() {
  try {
    const ports = [3000, 3001, 3002];
    
    for (const port of ports) {
      try {
        const response = await fetch(`http://localhost:${port}`);
        if (response.ok) {
          console.log(`‚úÖ Servidor rodando na porta ${port}`);
          return port;
        }
      } catch (error) {
        console.log(`‚ùå Porta ${port} n√£o est√° respondendo`);
      }
    }
    
    console.log('‚ùå Nenhum servidor est√° rodando');
    return null;
  } catch (error) {
    console.error('‚ùå Erro ao testar servidor:', error);
    return null;
  }
}

// Testar se a API est√° funcionando
async function testAPIHealth() {
  try {
    const response = await fetch('http://localhost:3000/api/health');
    if (response.ok) {
      console.log('‚úÖ API est√° funcionando');
      return true;
    } else {
      console.log('‚ö†Ô∏è API retornou status:', response.status);
      return false;
    }
  } catch (error) {
    console.log('‚ùå API n√£o est√° respondendo');
    return false;
  }
}

// Testar se o Supabase est√° acess√≠vel
async function testSupabaseConnection() {
  try {
    const supabaseUrl = 'https://qerubjitetqwfqqydhzv.supabase.co';
    const response = await fetch(`${supabaseUrl}/rest/v1/segments?select=id&limit=1`, {
      headers: {
        'apikey': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InFlcnViaml0ZXRxd2ZxcXlkaHp2Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1NDAwNTk0NSwiZXhwIjoyMDY5NTgxOTQ1fQ.hBfdao-iJX4KvjMQ7LzcmBf4PXtbcMrat9IGr2asfDc'
      }
    });
    
    if (response.ok) {
      console.log('‚úÖ Supabase est√° acess√≠vel');
      return true;
    } else {
      console.log('‚ö†Ô∏è Supabase retornou status:', response.status);
      return false;
    }
  } catch (error) {
    console.log('‚ùå Supabase n√£o est√° acess√≠vel:', error.message);
    return false;
  }
}

// Executar todos os testes
async function runHealthChecks() {
  console.log('\nüîç Iniciando verifica√ß√µes de sa√∫de...\n');
  
  const serverPort = await testServerHealth();
  const apiHealth = await testAPIHealth();
  const supabaseHealth = await testSupabaseConnection();
  
  console.log('\nüìä Resumo dos testes:');
  console.log(`- Servidor: ${serverPort ? '‚úÖ Funcionando' : '‚ùå N√£o funcionando'}`);
  console.log(`- API: ${apiHealth ? '‚úÖ Funcionando' : '‚ùå N√£o funcionando'}`);
  console.log(`- Supabase: ${supabaseHealth ? '‚úÖ Funcionando' : '‚ùå N√£o funcionando'}`);
  
  if (serverPort && supabaseHealth) {
    console.log('\nüéâ Sistema est√° saud√°vel!');
    console.log(`üåê Acesse: http://localhost:${serverPort}`);
  } else {
    console.log('\n‚ö†Ô∏è Sistema tem problemas que precisam ser corrigidos');
  }
}

// Executar os testes
runHealthChecks();


