import { test, expect } from '@playwright/test';

// Usu√°rios documentados no README.md
const USERS = {
  ADMIN_PRINCIPAL: {
    email: 'admin@breno-erp.com',
    password: 'Admin@2024',
    name: 'Administrador Sistema'
  },
  ADMIN_SECUNDARIO: {
    email: 'admin@erppro.com', 
    password: 'admin123',
    name: 'Admin ERP Pro'
  }
};

test.describe('üß™ Testes E2E - Login Breno ERP', () => {
  
  test.beforeEach(async ({ page }) => {
    // Navegar para a p√°gina de login
    await page.goto('/');
    
    // Aguardar a p√°gina carregar
    await page.waitForLoadState('networkidle');
  });

  test('üîê Login com usu√°rio principal', async ({ page }) => {
    console.log('üß™ Testando login com usu√°rio principal...');
    
    // Verificar se estamos na p√°gina de login
    await expect(page).toHaveTitle(/Breno ERP/);
    
    // Preencher email
    await page.fill('input[type="email"]', USERS.ADMIN_PRINCIPAL.email);
    
    // Preencher senha
    await page.fill('input[type="password"]', USERS.ADMIN_PRINCIPAL.password);
    
    // Clicar no bot√£o de login
    await page.click('button[type="submit"]');
    
    // Aguardar redirecionamento para o dashboard
    await page.waitForURL('**/dashboard', { timeout: 10000 });
    
    // Verificar se o login foi bem-sucedido
    await expect(page).toHaveURL(/.*dashboard/);
    
    // Verificar se o nome do usu√°rio aparece na interface
    await expect(page.locator('text=' + USERS.ADMIN_PRINCIPAL.name)).toBeVisible({ timeout: 5000 });
    
    console.log('‚úÖ Login com usu√°rio principal realizado com sucesso!');
  });

  test('üîê Login com usu√°rio secund√°rio', async ({ page }) => {
    console.log('üß™ Testando login com usu√°rio secund√°rio...');
    
    // Verificar se estamos na p√°gina de login
    await expect(page).toHaveTitle(/Breno ERP/);
    
    // Preencher email
    await page.fill('input[type="email"]', USERS.ADMIN_SECUNDARIO.email);
    
    // Preencher senha
    await page.fill('input[type="password"]', USERS.ADMIN_SECUNDARIO.password);
    
    // Clicar no bot√£o de login
    await page.click('button[type="submit"]');
    
    // Aguardar redirecionamento para o dashboard
    await page.waitForURL('**/dashboard', { timeout: 10000 });
    
    // Verificar se o login foi bem-sucedido
    await expect(page).toHaveURL(/.*dashboard/);
    
    // Verificar se o nome do usu√°rio aparece na interface
    await expect(page.locator('text=' + USERS.ADMIN_SECUNDARIO.name)).toBeVisible({ timeout: 5000 });
    
    console.log('‚úÖ Login com usu√°rio secund√°rio realizado com sucesso!');
  });

  test('‚ùå Login com credenciais inv√°lidas', async ({ page }) => {
    console.log('üß™ Testando login com credenciais inv√°lidas...');
    
    // Preencher email inv√°lido
    await page.fill('input[type="email"]', 'invalid@email.com');
    
    // Preencher senha inv√°lida
    await page.fill('input[type="password"]', 'wrongpassword');
    
    // Clicar no bot√£o de login
    await page.click('button[type="submit"]');
    
    // Aguardar mensagem de erro
    await page.waitForTimeout(2000);
    
    // Verificar se permanece na p√°gina de login
    await expect(page).toHaveURL(/.*login/);
    
    console.log('‚úÖ Teste de credenciais inv√°lidas passou!');
  });

  test('üîç Verificar elementos da p√°gina de login', async ({ page }) => {
    console.log('üß™ Verificando elementos da p√°gina de login...');
    
    // Verificar se os campos de input est√£o presentes
    await expect(page.locator('input[type="email"]')).toBeVisible();
    await expect(page.locator('input[type="password"]')).toBeVisible();
    await expect(page.locator('button[type="submit"]')).toBeVisible();
    
    // Verificar se o t√≠tulo da p√°gina est√° correto
    await expect(page).toHaveTitle(/Breno ERP/);
    
    // Verificar se h√° algum texto indicando que √© a p√°gina de login
    await expect(page.locator('text=Login')).toBeVisible();
    
    console.log('‚úÖ Elementos da p√°gina de login verificados!');
  });

  test('üöÄ Fluxo completo: Login -> Dashboard -> Logout', async ({ page }) => {
    console.log('üß™ Testando fluxo completo de login...');
    
    // 1. Fazer login
    await page.fill('input[type="email"]', USERS.ADMIN_PRINCIPAL.email);
    await page.fill('input[type="password"]', USERS.ADMIN_PRINCIPAL.password);
    await page.click('button[type="submit"]');
    
    // 2. Aguardar redirecionamento para dashboard
    await page.waitForURL('**/dashboard', { timeout: 10000 });
    
    // 3. Verificar se est√° no dashboard
    await expect(page).toHaveURL(/.*dashboard/);
    
    // 4. Verificar se o menu est√° vis√≠vel
    await expect(page.locator('nav')).toBeVisible({ timeout: 5000 });
    
    // 5. Procurar e clicar no bot√£o de logout
    // Pode estar em um menu dropdown ou como bot√£o direto
    const logoutButton = page.locator('button:has-text("Logout"), a:has-text("Logout"), [data-testid="logout"]').first();
    
    if (await logoutButton.isVisible()) {
      await logoutButton.click();
    } else {
      // Se n√£o encontrar bot√£o de logout, tentar navegar para /logout
      await page.goto('/logout');
    }
    
    // 6. Verificar se foi redirecionado para a p√°gina de login
    await page.waitForURL('**/login', { timeout: 5000 });
    await expect(page).toHaveURL(/.*login/);
    
    console.log('‚úÖ Fluxo completo de login/logout testado com sucesso!');
  });
}); 