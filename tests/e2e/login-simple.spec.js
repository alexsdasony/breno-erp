import { test, expect } from '@playwright/test';

// Usu√°rio principal documentado no README.md
const USER = {
  email: 'admin@breno-erp.com',
  password: 'Admin@2024'
};

test('üîê Login e Visualizar Dashboard', async ({ page }) => {
  console.log('üß™ Iniciando login para ver o dashboard...');
  
  // 1. Navegar para a p√°gina inicial
  await page.goto('/');
  console.log('‚úÖ P√°gina carregada');
  
  // 2. Aguardar um pouco para a p√°gina carregar
  await page.waitForTimeout(3000);
  
  // 3. Preencher email
  await page.fill('input[type="email"]', USER.email);
  console.log('‚úÖ Email preenchido:', USER.email);
  
  // 4. Preencher senha
  await page.fill('input[type="password"]', USER.password);
  console.log('‚úÖ Senha preenchida');
  
  // 5. Clicar no bot√£o de login
  await page.click('button[type="submit"]');
  console.log('‚úÖ Bot√£o de login clicado');
  
  // 6. Aguardar um pouco para o login processar
  await page.waitForTimeout(5000);
  
  // 7. Verificar se h√° erro de conex√£o
  const errorMessage = page.locator('text=Erro no Login, text=Falha na conex√£o');
  if (await errorMessage.isVisible()) {
    console.log('‚ö†Ô∏è Erro de conex√£o detectado, tentando novamente...');
    
    // Aguardar um pouco mais e tentar novamente
    await page.waitForTimeout(3000);
    await page.click('button[type="submit"]');
    await page.waitForTimeout(5000);
  }
  
  // 8. Aguardar redirecionamento para o dashboard (com timeout maior)
  try {
    await page.waitForURL('**/dashboard', { timeout: 30000 });
    console.log('‚úÖ Redirecionamento para dashboard realizado');
  } catch (error) {
    console.log('‚ö†Ô∏è Timeout no redirecionamento, verificando URL atual...');
    console.log('üåê URL atual:', page.url());
    
    // Se n√£o redirecionou, verificar se ainda est√° na p√°gina de login
    if (page.url().includes('login') || page.url().endsWith('/')) {
      console.log('‚ùå Ainda na p√°gina de login, verificando erros...');
      
      // Verificar se h√° mensagens de erro
      const errors = await page.locator('text=Erro, text=Error, text=Falha').all();
      for (const error of errors) {
        if (await error.isVisible()) {
          console.log('‚ùå Erro encontrado:', await error.textContent());
        }
      }
      
      // Aguardar mais tempo para visualizar
      await page.waitForTimeout(10000);
      throw new Error('Login falhou - verificar backend e credenciais');
    }
  }
  
  // 9. Verificar se estamos no dashboard
  await expect(page).toHaveURL(/.*dashboard/);
  console.log('‚úÖ Dashboard confirmado!');
  console.log('üåê URL atual:', page.url());
  
  // 10. Aguardar mais tempo para visualizar o dashboard
  console.log('üëÄ Visualizando dashboard por 15 segundos...');
  await page.waitForTimeout(15000);
  
  console.log('üéâ Login realizado com sucesso e dashboard visualizado!');
}); 